~
#include <math/aabb.hpp>
#include <math/lineSegment.hpp>

#include <array>

struct MassInfo {
	float mass;
	float rotationalInertia;
};
~

CircleCollider @Editor {
	float radius;

	^~
	CircleCollider(const CircleColliderEditor& circle);
	auto massInfo(float density) const -> MassInfo;
	auto aabb(Vec2 pos, float orientation) const -> Aabb;
	~
}

BoxCollider @Editor {
	Vec2 size;

	^~
	BoxCollider(const BoxColliderEditor& box);
	// @Performance: Could have an update method on a collider that would update things that are often used like the rotation matrix.
	// @Performance: Maybe store halfSize and not size because it is used more often.
	auto massInfo(float density) const -> MassInfo;
	auto aabb(Vec2 pos, float orientation) const -> Aabb;

	auto getCorners(Vec2 pos, float orientation) const -> std::array<Vec2, 4>;
	auto getEdges(Vec2 pos, float orientation) const -> std::array<LineSegment, 4>;
	~
}