~
#include <variant>
~

LevelBox @Serialize {
	Vec2 size;
}

LevelCircle @Serialize {
	float radius;
}

~
struct LevelConvexPolygon {
	std::vector<Vec2> verts;

	auto toJson() const -> Json::Value;
	static auto fromJson(const Json::Value& json) -> LevelConvexPolygon;
};
~

~
using LevelCollider = std::variant<LevelBox, LevelCircle, LevelConvexPolygon>;
auto levelColliderToJson(const LevelCollider& collider) -> Json::Value;
auto levelColliderFromJson(const Json::Value& collider) -> LevelCollider;
~

LevelBody @Serialize {
	Vec2 pos;
	float orientation;
	Vec2 vel;
	float angularVel;
	float mass;
	float rotationalInertia;
	float coefficientOfFriction;
	~LevelCollider~ collider Custom(levelColliderToJson levelColliderFromJson);
}

LevelDistanceJoint @Serialize {
	i32 bodyAIndex;
	i32 bodyBIndex;
	float distance;
	Vec2 anchorA;
	Vec2 anchorB;
}

LevelRevoluteJoint @Serialize {
	i32 bodyAIndex;
	i32 bodyBIndex;
	Vec2 anchorA;
	Vec2 anchorB;
	float motorSpeed;
}

LevelTrail @Serialize {
	i32 bodyIndex;
	Vec2 anchor;
	Vec3 color;
	i32 maxHistorySize;
}

LevelIgnoredCollision @Serialize {
	i32 bodyAIndex;
	i32 bodyBIndex;
}

Level @Serialize {
	vector<~LevelBody~> bodies = ~std::vector<LevelBody>{}~;
	vector<~LevelDistanceJoint~> distanceJoints = ~std::vector<LevelDistanceJoint>{}~;
	vector<~LevelRevoluteJoint~> revoluteJoints = ~std::vector<LevelRevoluteJoint>{}~;
	vector<~LevelTrail~> trails = ~std::vector<LevelTrail>{}~;
	vector<~LevelIgnoredCollision~> ignoredCollisions = ~std::vector<LevelIgnoredCollision>{}~;
	Vec2 gravity = ~Vec2{ 0.0f, -10.0f }~;
}