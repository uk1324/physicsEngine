~
#include <game/collidersData.hpp>
#include <variant>
#include <optional>

using Collider = std::variant<BoxCollider, CircleCollider>;
auto colliderToJson(const Collider& collider) -> Json::Value;
auto jsonToCollider(const Json::Value& json) -> Collider;
auto displayColliderGui(const Collider& collider) -> void;
~

Body @Editor {
	Vec2 pos;
	angle orientation;
	Vec2 vel;
	float angularVel;
	float mass;
	float rotationalInertia;
	float coefficientOfFriction;
	~Collider~ collider Custom(colliderToJson jsonToCollider displayColliderGui);

	^~
	Body(Vec2 pos, const Collider& collider, bool isStatic);
	Body(const BodyEditor& body);
	auto updateInvMassAndInertia() -> void;
	Body();
	auto isStatic() const -> bool { return invMass == 0.0f; }

	Vec2 force;
	float torque;
	float invMass;
	float invRotationalInertia;
	~
}

DistanceJointAnchor @Editor {
	usize body;
	Vec2 objectSpaceOffset;
}

~
auto anchorToJson(const std::variant<Vec2, DistanceJointAnchorEditor>& anchor) -> Json::Value;
auto jsonToAnchor(const Json::Value& json) -> std::variant<Vec2, DistanceJointAnchorEditor>;
auto displayAnchorGui(const std::variant<Vec2, DistanceJointAnchorEditor>& anchor) -> void;
~

DistanceJointEntity @Editor {
	~DistanceJointAnchorEditor~ anchorA;
	~std::variant<Vec2, DistanceJointAnchorEditor>~ staticWorldSpaceAnchorOrBodyAnchorB Custom(anchorToJson jsonToAnchor displayAnchorGui);
	float distance;
}